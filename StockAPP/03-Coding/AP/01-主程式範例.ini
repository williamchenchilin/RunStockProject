from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
import pyodbc
import schedule
import time

app = Flask(__name__)

# Channel Access Token 和 Channel Secret 從 Line Developer 取得
line_bot_api = LineBotApi('YOUR_CHANNEL_ACCESS_TOKEN')
handler = WebhookHandler('YOUR_CHANNEL_SECRET')

# MSSQL 資料庫連接
conn_str = 'DRIVER={SQL Server};SERVER=your_server;DATABASE=your_database;UID=your_username;PWD=your_password'
conn = pyodbc.connect(conn_str)
cursor = conn.cursor()

# 創建資料表（若不存在）
cursor.execute('''
    IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='users' AND xtype='U')
    CREATE TABLE users (
        user_id NVARCHAR(255) PRIMARY KEY,
        name NVARCHAR(255),
        preference NVARCHAR(255)
    )
''')
conn.commit()

# 定義一個任務，例如定時發送通知
def send_custom_notification():
    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()
    for user in users:
        user_id = user[0]
        message = '您的客制資訊：XXX'  # 替換為實際的客制資訊
        line_bot_api.push_message(user_id, TextSendMessage(text=message))

# 在每天的固定時間執行任務（例如每天中午12點）
schedule.every().day.at("12:00").do(send_custom_notification)

# 主程式處理 LineBot 接收的事件
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    message_text = event.message.text.lower()
    reply_token = event.reply_token

    if is_existing_user(user_id):
        # 使用者存在，處理使用者的問題
        handle_user_question(user_id, message_text, reply_token)
    else:
        # 新使用者的處理邏輯，例如歡迎訊息或初始設定
        line_bot_api.reply_message(
            reply_token,
            TextSendMessage(text="歡迎新使用者！請完成初始設定。")
        )
        # 將新使用者添加到資料庫
        add_user_to_database(user_id)

# 處理使用者的問題
def handle_user_question(user_id, question, reply_token):
    # 根據使用者的問題執行相應的邏輯
    # 例如，檢查問題並回覆相應的答案
    if question == '請問你的姓名？':
        line_bot_api.reply_message(
            reply_token,
            TextSendMessage(text="我是 Line Bot，你呢？")
        )
    elif question == '請問你的年齡？':
        line_bot_api.reply_message(
            reply_token,
            TextSendMessage(text="我是一個程式，沒有年齡。")
        )
    else:
        # 其他問題的處理邏輯
        # ...

# 檢查使用者是否已存在於資料庫中
def is_existing_user(user_id):
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    return cursor.fetchone() is not None

# 新使用者的處理邏輯，將新使用者添加到資料庫
def add_user_to_database(user_id):
    cursor.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()

# 主程式持續運行
if __name__ == "__main__":
    app.run(port=5000)
    while True:
        schedule.run_pending()
        time.sleep(1)